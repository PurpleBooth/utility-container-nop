on:
  push:
  workflow_dispatch:
  pull_request:

name: Pipeline

jobs:
  docker-build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
          with:
            submodules: recursive
        - name: Set up QEMU
          uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
        - run: echo "repository=$( echo "ghcr.io/$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          id: docker
          env:
            REPOSITORY: ${{ github.repository }}
        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
          with:
            images: ${{ steps.docker.outputs.repository }}
            tags: |
              type=raw,value=latest
              type=sha
        - name: Test build
          uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
          with:
            context: .
            push: false
            pull: true
            platforms: linux/amd64,linux/arm64
            cache-from: type=gha
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
        - name: Test build to run
          uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
          with:
            context: .
            push: false
            pull: true
            load: true
            cache-from: type=gha
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
        - name: Run docker image
          run: docker run --rm ghcr.io/purplebooth/utility-container-nop:latest

  check-conventional-commits:
    uses: armakuni/github-actions/.github/workflows/check-conventional-commits.yml@c58de42e30374346839a84ee9a58d42e0ea29473 # v0.19.5

  lint-pipeline:
    uses: armakuni/github-actions/.github/workflows/lint-pipeline.yml@c58de42e30374346839a84ee9a58d42e0ea29473 # v0.19.5


  all-tests-succeeded:
    needs:
      - docker-build
      - check-conventional-commits
      - lint-pipeline
    runs-on: ubuntu-latest
    steps:
      - run: "true"
        shell: bash

  release:
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    needs:
      - all-tests-succeeded
    outputs:
      version_bump: ${{ steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Get tags
        run: git fetch --tags origin
      - uses: armakuni/github-actions/setup-cocogitto@c58de42e30374346839a84ee9a58d42e0ea29473 # v0.19.5
      - id: previous_version
        run: |
          cog get-version | tee .version
          echo "previous_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
          rm .version
        shell: bash
      - name: Semver release
        id: release
        run: |
          git config --global user.name "cog-bot"
          git config --global user.email "cog@example.com"
          cog bump --auto
      - id: current_version
        run: |
          cog get-version | tee .version
          echo "current_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
          rm .version
        shell: bash


  docker-push:
    if: needs.release.outputs.version_bump
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        lfs: true
        ref: v${{ needs.release.outputs.current_version }}
        submodules: recursive
    - name: Install Cosign
      uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
    - name: Login to GitHub Container Registry
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - run: echo "repository=$( echo "ghcr.io/$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      id: docker
      name: Turn repository name into docker registry name
      env:
        REPOSITORY: ${{ github.repository }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
      with:
        images: ${{ steps.docker.outputs.repository }}
        tags: |
          type=raw,value=latest
          type=semver,pattern={{version}},value=v${{ needs.release.outputs.current_version }}
          type=sha
    - name: Deploy build
      uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
      id: build-and-push
      with:
        context: .
        push: true
        pull: true
        sbom: true
        provenance: mode=max
        platforms: linux/amd64,linux/arm64
        github-token: ${{ secrets.GITHUB_TOKEN }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=registry,oci-mediatypes=true,compression=estargz,force-compression=true
    - name: Sign the images with GitHub OIDC Token
      env:
        REPO: ${{ steps.docker.outputs.repository }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      run: cosign sign --yes "$REPO@$DIGEST"
